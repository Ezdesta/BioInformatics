    Installing Galaxy on Ubuntu:
        How to Install Python 3.7 on Ubuntu 18.04
                Python is one of the most popular programming languages in the world. 
                With its simple and easy to learn syntax, Python is a great choice for beginners and experienced developers. 
                Python is quite a versatile programming language. 
                It can be used as a scripting language, to build games, develop websites, create machine learning algorithms, and analyze data.

                Python 3.7 includes many new features such as postponed evaluation of type annotations, support for data classes and context variables, customization of access to module attributes, and more .

                This tutorial describes two ways of installing Python 3.7 on Ubuntu 18.04: 
                By using the standard apt tool from the deadsnakes PPA, 
                and by building from the source code.

                The same steps apply for Ubuntu 16.04 and any Ubuntu-based distribution, including Kubuntu, Linux Mint, and Elementary OS.

                Prerequisites
                You’ll need to be logged in as root or user with sudo access to be able to install packages on your Ubuntu system.

                Installing Python 3.7 on Ubuntu with Apt
                Installing Python 3.7 on Ubuntu with apt is a relatively straightforward process and will only take a few minutes:

                Start by updating the packages list and installing the prerequisites:

                sudo apt update
                sudo apt install software-properties-common
                Next, add the deadsnakes PPA to your sources list:

                sudo add-apt-repository ppa:deadsnakes/ppa
                When prompted press Enter to continue:

                Press [ENTER] to continue or Ctrl-c to cancel adding it.
                Once the repository is enabled, install Python 3.7 with:

                sudo apt install python3.7
                At this point, Python 3.7 is installed on your Ubuntu system and ready to be used. You can verify it by typing:

                python3.7 --version
                Python 3.7.3
                Installing Python 3.7 on Ubuntu from Source
                In this section, we’ll show you how to download and compile Python 3.7:


                First, update the packages list and install the packages necessary to build Python source:

                sudo apt update
                sudo apt install build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libsqlite3-dev libreadline-dev libffi-dev wget libbz2-dev
                Download the latest release’s source code from the Python download page using the following wget command:

                wget https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz
                At the time of writing this article, the latest release is 3.7.4.

                Once the download is complete, extract the gzipped tarball :

                tar -xf Python-3.7.4.tgz
                Next, navigate to the Python source directory and run the configure script which will perform a number of checks to make sure all of the dependencies on your system are present:

                cd Python-3.7.4
                ./configure --enable-optimizations
                The --enable-optimizations option will optimize the Python binary by running multiple tests. This makes the build process slower.

                Start the Python build process using make:

                make -j 8
                For faster build time, modify the -j flag according to your processor. If you do not know the number of cores your processor, you can find it by typing nproc. The system used in this guide has 8 cores, so we are using the -j8 flag.

                When the build is done, install the Python binaries by running the following command:

                sudo make altinstall
                Do not use the standard make install as it will overwrite the default system python3 binary.

                That’s it. Python 3.7 has been installed and ready to be used. Verify it by typing:

                python3.7 --version
                The output will show the Python version:

                Python 3.7.4
                Conclusion
                You have installed Python 3.7 on your Ubuntu 18.04 machine and you can start developing your Python 3 project.

                Next, you can read about How to Use Pip and How to Create Python Virtual Environments for different Python projects.


                @@@@@@@@@@@@@@@@@@@@


                How to Install Pip on Ubuntu 18.04


                Pip is a package management system that simplifies installation and management of software packages written in Python such as those found in the Python Package Index (PyPI). Pip is not installed by default on Ubuntu 18.04, but the installation is pretty straightforward.

                In this tutorial, we will show you how to install Python Pip on Ubuntu 18.04 using the apt package manager. We will also walk you through the basics of installing and managing Python packages with pip.

                Prerequisites
                Before continuing with this tutorial, make sure you are logged in as a user with sudo privileges .


                Installing pip for Python 3
                Ubuntu 18.04 ships with Python 3, as the default Python installation. Complete the following steps to install pip (pip3) for Python 3:

                Start by updating the package list using the following command:

                sudo apt update
                Use the following command to install pip for Python 3:

                sudo apt install python3-pip
                The command above will also install all the dependencies required for building Python modules.

                Once the installation is complete, verify the installation by checking the pip version:

                pip3 --version
                The version number may vary, but it will look something like this:

                pip 9.0.1 from /usr/lib/python3/dist-packages (python 3.6)
                Installing pip for Python 2
                Python 2 is not installed by default in Ubuntu 18.04. To install Python 2 and pip for Python 2, complete the following steps:

                Update the package index by running the following command:

                sudo apt update
                Install pip for Python 2 with:

                sudo apt install python-pip
                The command above will install Python2, Pip and all the dependencies required for building Python modules.

                Verify the installation by printing the pip version number:

                pip --version
                The version number may vary, but it will look something like this:

                pip 9.0.1 from /usr/lib/python2.7/dist-packages (python 2.7)
                How to Use Pip
                When installing python modules globally it is highly recommended to install distribution provided python modules using the apt package manager because they are tested to work properly on Ubuntu systems.

                You should install Python modules globally using pip only if there is no package available through the package manager.


                In most cases, you should use pip within a virtual environment only. Python Virtual Environments allows you to install Python modules in an isolated location for a specific project, rather than being installed globally. This way you do not have to worry about affecting other Python projects.

                In this section, we show you a few useful basic pip commands. With pip, we can install packages from PyPI, version control, local projects, and from distribution files but in most cases, you will install packages from PyPI.

                To view the list of all pip commands and options, type:

                pip3 --help

                You can get more information about a specific command using pip <command> --help. For example to get more information about the install command, type:

                pip3 install --help
                Installing Packages with Pip
                Let’s say you want to install a package called scrapy which is used for scraping and extracting data from websites.


                To install the latest version of the package you need to run the following command:

                pip3 install scrapy
                To install a specific version of the package you would issue the following command:

                pip3 install scrapy==1.5
                Replace pip3 with pip if using Python 2.
                Installing Packages with Pip using the Requirements Files
                requirement.txt is a text file that contains a list of pip packages with their versions that are required to run a specific Python project.

                Use the following command to install a list of requirements specified in a file:

                pip3 install -r requirements.txt
                Listing Installed Packages

                To list all the installed pip packages use the command below:

                pip3 list
                Upgrade a Package With Pip
                To upgrade an installed package to the latest version, run:

                pip3 install --upgrade package_name
                Uninstalling Packages With Pip
                To uninstall a package run:

                pip3 uninstall package_name
                Conclusion
                In this tutorial, 
                you have learned how to install pip on your Ubuntu machine 
                and how to manage Python packages using pip.

